---

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates single EC2 instance in public subnet in VPC network to
  work on simple task on Jupyter Lab. VPC stack has to be created before.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Notebook Instance Configuration
        Parameters:
          - KeyPairName
          - NotebookInstanceType
          - NotebookDiskSize
          - NotebookProfile
          - CloudWatchLogsGroup
          - LinuxAMIOS
      - Label:
          default: Network Configuration
        Parameters:
          - VPCStackName
          - RemoteAccessCIDR1
          - WebAccessCIDR1
          - VPCSubnetID
          - RemoteAccessCIDR2
          - RemoteAccessCIDR3
          - RemoteAccessCIDR4
          - WebAccessCIDR2
          - WebAccessCIDR3
          - WebAccessCIDR4
Parameters:
  VPCStackName:
    Description: VPC network stack name. It must export "VPCID" and subnet ID specified by VPCSubnetID parameter.
    Type: String
  VPCSubnetID:
    Description: Exported variable name of Subnet ID in VPC stack.
    Default: PublicSubnet1ID
    Type: String
  LinuxAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the notebook instance.
    Type: String
  NotebookInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: t2.micro
    Description: Amazon EC2 instance type for the notebook instance.
    Type: String
  NotebookDiskSize:
    Default: 8
    Description: Disk size by GB
    Type: Number
    MinValue: 8
    MaxValue: 100
  NotebookProfile:
    Default: ""
    Description: Instance profile to attach the notebook instance. Its role have to be allowed to put CloudWatch Logs.
    Type: String
  KeyPairName:
    Description: >-
      Enter a Public/private key pair. If you do not have one in this region,
      please create it before continuing
    Type: 'AWS::EC2::KeyPair::KeyName'
  CloudWatchLogsGroup:
    Default: "/var/log/jupyterlab.log"
    Description: Group name of CloudWatch Logs to deliver Jupyter Lab server log.
    Type: String
  RemoteAccessCIDR1:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the worker
    Type: String
  RemoteAccessCIDR2:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the worker
    Default: 0.0.0.0/0
    Type: String
  RemoteAccessCIDR3:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the worker
    Default: 0.0.0.0/0
    Type: String
  RemoteAccessCIDR4:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the worker
    Default: 0.0.0.0/0
    Type: String
  WebAccessCIDR1:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for web access
    Type: String
  WebAccessCIDR2:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for web access
    Default: 0.0.0.0/0
    Type: String
  WebAccessCIDR3:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for web access
    Default: 0.0.0.0/0
    Type: String
  WebAccessCIDR4:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for web access
    Default: 0.0.0.0/0
    Type: String
Conditions:
  UseInstanceProfile:
    !Not [!Equals [!Ref NotebookProfile, ""]]
  UseRemoteAccessCIDR2:
    !Not [!Equals [!Ref RemoteAccessCIDR2, "0.0.0.0/0"]]
  UseRemoteAccessCIDR3:
    !Not [!Equals [!Ref RemoteAccessCIDR3, "0.0.0.0/0"]]
  UseRemoteAccessCIDR4:
    !Not [!Equals [!Ref RemoteAccessCIDR4, "0.0.0.0/0"]]
  UseWebAccessCIDR2:
    !Not [!Equals [!Ref WebAccessCIDR2, "0.0.0.0/0"]]
  UseWebAccessCIDR3:
    !Not [!Equals [!Ref WebAccessCIDR3, "0.0.0.0/0"]]
  UseWebAccessCIDR4:
    !Not [!Equals [!Ref WebAccessCIDR4, "0.0.0.0/0"]]
Resources:
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Notebook
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '1200'
  RemoteAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH Access to Notebook Hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref RemoteAccessCIDR1
        - IpProtocol: icmp
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: !Ref RemoteAccessCIDR1
        - !If
            - UseRemoteAccessCIDR2
            - IpProtocol: tcp
              FromPort: "22"
              ToPort: "22"
              CidrIp: !Ref RemoteAccessCIDR2
            - !Ref "AWS::NoValue"
        - !If
            - UseRemoteAccessCIDR3
            - IpProtocol: tcp
              FromPort: "22"
              ToPort: "22"
              CidrIp: !Ref RemoteAccessCIDR3
            - !Ref "AWS::NoValue"
        - !If
            - UseRemoteAccessCIDR4
            - IpProtocol: tcp
              FromPort: "22"
              ToPort: "22"
              CidrIp: !Ref RemoteAccessCIDR4
            - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: SSHAccessToJupyterLab
        - Key: Network
          Value: Public
  WebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables Web Access to Hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "8888"
          ToPort: "8888"
          CidrIp: !Ref WebAccessCIDR1
        - !If
            - UseWebAccessCIDR2
            - IpProtocol: tcp
              FromPort: "8888"
              ToPort: "8888"
              CidrIp: !Ref WebAccessCIDR2
            - !Ref "AWS::NoValue"
        - !If
            - UseWebAccessCIDR3
            - IpProtocol: tcp
              FromPort: "8888"
              ToPort: "8888"
              CidrIp: !Ref WebAccessCIDR3
            - !Ref "AWS::NoValue"
        - !If
            - UseWebAccessCIDR4
            - IpProtocol: tcp
              FromPort: "8888"
              ToPort: "8888"
              CidrIp: !Ref WebAccessCIDR4
            - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: WebAccessToJupyterLab
        - Key: Network
          Value: Public
  Notebook:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          OnCreate: [account, setup, pkg_amazonlinux, cfg, cfg_amazonlinux, svc, svc_amazonlinux]
        account:
          users:
            jupyter:
              homeDir: /opt/jupyter
        setup:
          files:
            /opt/local/bin/default-awsconfig.sh:
              content: |
                #!/bin/sh -v
                whoami
                echo home directory is "$HOME"
                [ -d ~/.aws ] || mkdir ~/.aws
                chmod 700 ~/.aws
                cp /opt/local/etc/default-awsconfig ~/.aws/config
                chmod 600 ~/.aws/config
              mode: "000755"
              owner: "root"
              group: "root"
            /opt/local/etc/default-awsconfig:
              content: !Sub |
                [default]
                region = ${AWS::Region}
              mode: "000644"
              owner: "root"
              group: "root"
            /opt/jupyter/server/Pipfile:
              content: |
                [[source]]
                url = "https://pypi.python.org/simple"
                verify_ssl = true
                name = "pypi"
                [packages]
                jupyterlab = "*"
                numpy = "*"
                pandas = "*"
                scipy = "*"
                scikit-learn = "*"
                statsmodels = "*"
                matplotlib = "*"
                seaborn = "*"
                # bokeh = "*"
                tensorflow = "*"
                pyyaml = "*"
                requests = "*"
              mode: "000644"
              owner: "jupyter"
              group: "jupyter"
            /opt/jupyter/notebook/README.md:
              content: |
                # Jupyter Lab

                Files in this folder will not be saved permanently.
                Please backup notebooks and data files on S3 bucket.

                ## Snippet

                Import Python modules.

                ```python
                import datetime
                import math

                import numpy as np
                import pandas as pd

                import matplotlib.pyplot as plt
                import seaborn as sns

                sns.set_style("whitegrid")

                %matplotlib inline
                ```
              mode: "000644"
              owner: "jupyter"
              group: "jupyter"
            /opt/jupyter/bin/jupyterlab.sh:
              content: |
                #!/bin/sh
                export PATH=$PATH:/usr/local/bin

                jupyter_dir=/opt/jupyter/server
                notebook_dir=/opt/jupyter/notebook
                logfile=${1-/var/log/jupyterlab.log}
                cd $jupyter_dir
                # echo "To generate password: pipenv run jupyter notebook password"
                pipenv run jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=$notebook_dir >> $logfile 2>&1
              mode: "000755"
              owner: "jupyter"
              group: "jupyter"
            /etc/init.d/jupyterlab:
              content: |
                #!/bin/sh
                # chkconfig: 2345 99 10
                # description: Jupyter Lab server

                NICELEVEL=+4

                # Source function library.
                . /etc/rc.d/init.d/functions

                # Python 3 Support — Click Documentation (5.0) - http://click.pocoo.org/5/python3/
                export LC_ALL=en_US.utf-8
                export LANG=en_US.utf-8

                prog=jupyter
                exec="/opt/jupyter/bin/jupyterlab.sh"
                pidfile=/var/run/jupyterlab.pid

                case "$1" in
                  start)
                    [ -x $exec ] || exit 5
                    nohup sudo -u jupyter $exec >/dev/null 2>&1 &
                    retval=$?
                    sleep 5
                    logger jupyterlab retval is $retval
                    [ $retval -ne 0 ] && echo_failure
                    exit 0
                    ;;
                  stop)
                    echo "stop is not implemented."
                    exit 1
                    ;;
                  *)
                    echo "Usage: $0 {start|stop}"
                    exit 2
                    ;;
                esac
                exit $?
              mode: "000755"
        pkg_amazonlinux:
          packages:
            yum:
              git: []
              python36-pip: []
              awslogs: []
        cfg:
          files:
            /var/log/jupyterlab.log:
              content: |
                Generated by AWS::CloudFormation::Init
              mode: "000644"
              owner: "jupyter"
              group: "jupyter"
        cfg_amazonlinux:
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/jupyterlab.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/jupyterlab.log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = ${CloudWatchLogsGroup}
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            pip:
              command: |
                # pip-3.6 install -U pip
                pip-3.6 install pipenv
        svc:
          commands:
            jupyter:
              command: |
                chown -R jupyter:jupyter /opt/jupyter
                sudo -u jupyter /opt/local/bin/default-awsconfig.sh
                cd /opt/jupyter/server && sudo -u jupyter /usr/local/bin/pipenv install
                [ -f /opt/jupyter/server/Pipfile.lock ] || exit 1
        svc_amazonlinux:
          services:
            sysvinit:
              awslogs:
                enabled: "true"
                ensureRunning: "true"
              jupyterlab:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !If [UseInstanceProfile, !Ref NotebookProfile, !Ref "AWS::NoValue"]
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", !FindInMap [LinuxAMINameMap, !Ref LinuxAMIOS, Code]]
      SecurityGroupIds:
        - !Ref RemoteAccessSecurityGroup
        - !Ref WebAccessSecurityGroup
      SubnetId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-${VPCSubnetID}"
      InstanceType: !Ref NotebookInstanceType
      BlockDeviceMappings:
        - DeviceName: !FindInMap [LinuxAMINameMap, !Ref LinuxAMIOS, RootDevice]
          Ebs:
            VolumeSize: !Ref NotebookDiskSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -v
            ${Packager} update -y
            # Helper function
            function error_exit {
              cfn-signal -e 1 -r "$1" "${WaitHandle}"
              exit 1
            }
            configsets=OnCreate
            if [ "${LinuxAMIOS}" == "Amazon-Linux-HVM" ]; then
              ${Packager} install -y aws-cfn-bootstrap
              # Extend PATH variable for `cfn-init` and `cfn-signal`
              export PATH=$PATH:/opt/aws/bin
            elif [ "${LinuxAMIOS}" == "Ubuntu-Server-16.04-LTS-HVM" ]; then
              ${Packager} install -y python-pip
              # Use Python 2.x for aws-cfn-bootstrap
              pip install -U pip
              pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              configsets=OnCreateUbuntu
              # Extend PATH variable for `cfn-init` and `cfn-signal`
              export PATH=$PATH:/usr/local/bin
            else
              error_exit 'unhandled OS type ${LinuxAMIOS}'
            fi
            cfn-init --stack ${AWS::StackId} --resource ${Resource} --configsets $configsets --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            cfn-signal -e 0 -r "Notebook setup complete" "${WaitHandle}"
          - Packager: !FindInMap [LinuxAMINameMap, !Ref LinuxAMIOS, Packager]
            Resource: Notebook
      Tags:
        - Key: Name
          Value: JupyterLab
  NotebookEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Notebook
Outputs:
  NotebookEIP:
    Description: Public IP address of notebook
    Value: !Ref NotebookEIP
  SSHAccess:
    Description: SSH access target
    Value: !Join ["@", [!FindInMap [LinuxAMINameMap, !Ref LinuxAMIOS, User], !Ref NotebookEIP]]
  WebAccess:
    Description: Web access URL
    Value: !Sub 'http://${NotebookEIP}:8888/'
Mappings:
  # Derived from "quickstart-linux-bastion"
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2018.03.0.20180412-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-28ddc154
    ap-northeast-2:
      AMZNLINUXHVM: ami-efaf0181
    ap-northeast-3:
      AMZNLINUXHVM: ami-68c1cf15
    ap-south-1:
      AMZNLINUXHVM: ami-b46f48db
    ap-southeast-1:
      AMZNLINUXHVM: ami-64260718
    ap-southeast-2:
      AMZNLINUXHVM: ami-60a26a02
    ca-central-1:
      AMZNLINUXHVM: ami-2f39bf4b
    cn-north-1:
      AMZNLINUXHVM: ami-3d3ee150
    cn-northwest-1:
      AMZNLINUXHVM: ami-0f9c886d
    eu-central-1:
      AMZNLINUXHVM: ami-1b316af0
    eu-west-1:
      AMZNLINUXHVM: ami-9cbe9be5
    eu-west-2:
      AMZNLINUXHVM: ami-c12dcda6
    eu-west-3:
      AMZNLINUXHVM: ami-cae150b7
    sa-east-1:
      AMZNLINUXHVM: ami-f09dcc9c
    us-east-1:
      AMZNLINUXHVM: ami-467ca739
    us-east-2:
      AMZNLINUXHVM: ami-976152f2
    us-west-1:
      AMZNLINUXHVM: ami-46e1f226
    us-west-2:
      AMZNLINUXHVM: ami-6b8cef13
  LinuxAMINameMap:
    Amazon-Linux-HVM:
      Code: AMZNLINUXHVM
      RootDevice: /dev/xvda
      User: ec2-user
      Packager: yum
